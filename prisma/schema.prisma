// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/@generated/prisma-nestjs-graphql"
  reExport = Directories

  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

model Guild {
  id      Int    @id @default(autoincrement())
  guildId String @unique

  blacklistedChannels      BlacklistedChannel[]
  musicBlacklistedChannels MusicBlacklistedChannel[]

  musicSettings MusicSetting?

  @@map("guilds")
}

model BlacklistedChannel {
  id        Int    @id @default(autoincrement())
  channelId String @unique
  guild     Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  guildId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blacklisted_channels")
}

model MusicBlacklistedChannel {
  id        Int    @id @default(autoincrement())
  channelId String @unique
  guild     Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  guildId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("music_blacklisted_channels")
}

model MusicSetting {
  id              Int     @id @default(autoincrement())
  volume          Int     @default(5)
  lastSongPlayed  String?
  nbOfSongsPlayed Int?
  guild           Guild   @relation(fields: [guildId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  guildId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("music_settings")
}
