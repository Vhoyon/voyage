name: CI - API

on:
  push:
    paths:
      - 'api/**'
      - 'package.json'

env:
  NODE_VERSION: '16'

jobs:
  cache-modules:
    name: Cache Node Modules
    runs-on: ubuntu-latest

    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Check for dupe action
        id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.1

      - name: Cache Node Modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ env.NODE_VERSION }}-${{ runner.OS }}-build-${{ hashFiles('package-lock.json') }}

      - name: Install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: npm ci --no-optional

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [cache-modules]

    if: ${{ needs.cache-modules.outputs.should_skip != 'true' }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Retrieve Node Modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ env.NODE_VERSION }}-${{ runner.OS }}-build-${{ hashFiles('package-lock.json') }}

      - name: Lint Source
        run: npm run lint:src --workspace api

      - name: Lint Tests
        run: npm run lint:tests --workspace api

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [cache-modules]

    if: ${{ needs.cache-modules.outputs.should_skip != 'true' }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Retrieve Node Modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ env.NODE_VERSION }}-${{ runner.OS }}-build-${{ hashFiles('package-lock.json') }}

      - name: Build
        run: npm run build --workspace api

  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    needs: [cache-modules]

    if: ${{ needs.cache-modules.outputs.should_skip != 'true' }}

    services:
      postgres:
        image: postgres:13.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Retrieve Node Modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ env.NODE_VERSION }}-${{ runner.OS }}-build-${{ hashFiles('package-lock.json') }}

      - name: Init
        run: npm run init --workspace api
        env:
          DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'

      - name: Test and Coverage
        if: github.event_name != 'pull_request'
        run: npm run test:cov --workspace api
        env:
          TEST_DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'

      - name: Test and Coverage (PR)
        if: github.event_name == 'pull_request'
        uses: anuraag016/Jest-Coverage-Diff@master
        with:
          runCommand: "npm run test --workspace api -- --coverage --collectCoverage=true --coverageReporters='json-summary' --coverageDirectory='../'"
          # delta: 0.5 # Delta of % changed that would make this job fail
          afterSwitchCommand: 'npm install'
        env:
          TEST_DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'

  seed:
    name: Test Seed
    runs-on: ubuntu-latest
    needs: [cache-modules]

    if: ${{ needs.cache-modules.outputs.should_skip != 'true' }}

    services:
      postgres:
        image: postgres:13.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Retrieve Node Modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ env.NODE_VERSION }}-${{ runner.OS }}-build-${{ hashFiles('package-lock.json') }}

      - name: Init
        run: npm run init --workspace api
        env:
          DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'

      - name: Seed
        run: npm run seed --workspace api
        env:
          DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'
